{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eWHaWpGYjSzm"
      },
      "source": [
        "# Ensemble methods. Exercises\n",
        "\n",
        "\n",
        "In this section we have only two exercise:\n",
        "\n",
        "1. Find the best three classifier in the stacking method using the classifiers from scikit-learn package.\n",
        "\n",
        "2. Build arcing arc-x4 method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "doNSbOw8jS0K"
      },
      "outputs": [],
      "source": [
        "%store -r data_set\n",
        "%store -r labels\n",
        "%store -r test_data_set\n",
        "%store -r test_labels\n",
        "%store -r unique_labels"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CvFNpGN-jS0a"
      },
      "source": [
        "## Exercise 1: Find the best three classifier in the stacking method\n",
        "\n",
        "Please use the following classifiers:\n",
        "\n",
        "* Linear regression,\n",
        "* Nearest Neighbors,\n",
        "* Linear SVM,\n",
        "* Decision Tree,\n",
        "* Naive Bayes,\n",
        "* QDA."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qbtub1gtjS0o"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PYH9e3GnjS0r"
      },
      "outputs": [],
      "source": [
        "def build_classifiers():\n",
        "    classifiers = [\n",
        "        KNeighborsClassifier(n_neighbors=5),\n",
        "        SVC(kernel='linear', probability=True),\n",
        "        DecisionTreeClassifier(),\n",
        "        GaussianNB(),\n",
        "        QuadraticDiscriminantAnalysis()\n",
        "    ]\n",
        "\n",
        "    trained_classifiers = []\n",
        "    for clf in classifiers:\n",
        "        clf.fit(data_set, labels)\n",
        "        trained_classifiers.append(clf)\n",
        "\n",
        "    scores = [accuracy_score(labels, clf.predict(data_set)) for clf in trained_classifiers]\n",
        "\n",
        "    sorted_indices = np.argsort(scores)[::-1]\n",
        "\n",
        "    best_classifiers = [trained_classifiers[i] for i in sorted_indices[:3]]\n",
        "\n",
        "    return best_classifiers\n",
        "\n",
        "def build_stacked_classifier(classifiers):\n",
        "    output = []\n",
        "    for classifier in classifiers:\n",
        "        output.append(classifier.predict(data_set))\n",
        "    output = np.array(output).T\n",
        "\n",
        "    from sklearn.linear_model import LogisticRegression\n",
        "    stacked_classifier = LogisticRegression()\n",
        "    stacked_classifier.fit(output, labels)\n",
        "\n",
        "    test_output = []\n",
        "    for classifier in classifiers:\n",
        "        test_output.append(classifier.predict(test_data_set))\n",
        "    test_output = np.array(test_output).T\n",
        "\n",
        "    predicted = stacked_classifier.predict(test_output)\n",
        "    return predicted\n",
        "\n",
        "classifiers = build_classifiers()\n",
        "predicted = build_stacked_classifier(classifiers)\n",
        "accuracy = accuracy_score(test_labels, predicted)\n",
        "print(f\"Stacked Model Accuracy: {accuracy:.4f}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KIiqUgWSjS1M"
      },
      "source": [
        "## Exercise 2:\n",
        "\n",
        "Use the boosting method and change the code to fullfilt the following requirements:\n",
        "\n",
        "* the weights should be calculated as:\n",
        "$w_{n}^{(t+1)}=\\frac{1+ I(y_{n}\\neq h_{t}(x_{n})}{\\sum_{i=1}^{N}1+I(y_{n}\\neq h_{t}(x_{n})}$,\n",
        "* the prediction is done with a voting method."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oF9QBv3ujS1O"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "# prepare data set\n",
        "\n",
        "def generate_data(sample_number, feature_number, label_number):\n",
        "    data_set = np.random.random_sample((sample_number, feature_number))\n",
        "    labels = np.random.choice(label_number, sample_number)\n",
        "    return data_set, labels\n",
        "\n",
        "labels = 2\n",
        "dimension = 2\n",
        "test_set_size = 1000\n",
        "train_set_size = 5000\n",
        "train_set, train_labels = generate_data(train_set_size, dimension, labels)\n",
        "test_set, test_labels = generate_data(test_set_size, dimension, labels)\n",
        "\n",
        "# init weights\n",
        "number_of_iterations = 10\n",
        "weights = np.ones((test_set_size,)) / test_set_size\n",
        "\n",
        "\n",
        "def train_model(classifier, weights):\n",
        "    return classifier.fit(X=test_set, y=test_labels, sample_weight=weights)\n",
        "\n",
        "def calculate_error(model):\n",
        "    predicted = model.predict(test_set)\n",
        "    I=calculate_accuracy_vector(predicted, test_labels)\n",
        "    Z=np.sum(I)\n",
        "    return (1+Z)/1.0"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ui-C9lU3jS1c"
      },
      "source": [
        "Fill the two functions below:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qR7r5xc6jS1d"
      },
      "outputs": [],
      "source": [
        "def set_new_weights(model):\n",
        "    # fill the code here (two lines)\n",
        "    pass"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B_XoqiPFjS1e"
      },
      "source": [
        "Train the classifier with the code below:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3G8ouCP4jS1f"
      },
      "outputs": [],
      "source": [
        "classifier = DecisionTreeClassifier(max_depth=1, random_state=1)\n",
        "classifier.fit(X=train_set, y=train_labels)\n",
        "alphas = []\n",
        "classifiers = []\n",
        "for iteration in range(number_of_iterations):\n",
        "    model = train_model(classifier, weights)\n",
        "    weights = set_new_weights(model)\n",
        "    classifiers.append(model)\n",
        "\n",
        "print(weights)\n",
        "\n",
        "\n",
        "validate_x, validate_label = generate_data(1, dimension, labels)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lUJx4pZnjS1h"
      },
      "source": [
        "Set the validation data set:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ayX3I6ZOjS1i"
      },
      "outputs": [],
      "source": [
        "validate_x, validate_label = generate_data(1, dimension, labels)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Yvb614P_jS1k"
      },
      "source": [
        "Fill the prediction code:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kJ0BqQq3jS1k"
      },
      "outputs": [],
      "source": [
        "def get_prediction(x):\n",
        "    # fill the code here (5-6 lines)\n",
        "    pass"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Zl5_lPDMjS1n"
      },
      "source": [
        "Test it:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GkZQjG2jjS1o"
      },
      "outputs": [],
      "source": [
        "prediction = get_prediction(validate_x)[0]\n",
        "\n",
        "print(prediction)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.9"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
