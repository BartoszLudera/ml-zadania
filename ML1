{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zSR31is7IKbF"
      },
      "source": [
        "# Exercises\n",
        "\n",
        "There are three exercises in this notebook:\n",
        "\n",
        "1. Use the cross-validation method to test the linear regression with different $\\alpha$ values, at least three.\n",
        "2. Implement a SGD method that will train the Lasso regression for 10 epochs.\n",
        "3. Extend the Fisher's classifier to work with two features. Use the class as the $y$."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y7lDh0DmIKbN"
      },
      "source": [
        "## 1. Cross-validation linear regression\n",
        "\n",
        "You need to change the variable ``alpha`` to be a list of alphas. Next do a loop and finally compare the results."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dC6d5WCoIKbP",
        "outputId": "2cfa73a3-d199-4204-b4c5-c6d238e835b3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Alpha: 0.01, Weights: [[-167.85534019    1.54416013]]\n",
            "Alpha: 0.1, Weights: [[-101.72397081    1.16978757]]\n",
            "Alpha: 1, Weights: [[-20.59044706   0.71048616]]\n",
            "Alpha: 10, Weights: [[-2.29106262  0.60688107]]\n",
            "Alpha: 100, Weights: [[-0.22873     0.59509096]]\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "\n",
        "x = np.array([188, 181, 197, 168, 167, 187, 178, 194, 140, 176, 168, 192, 173, 142, 176]).reshape(-1, 1).reshape(15,1)\n",
        "y = np.array([141, 106, 149, 59, 79, 136, 65, 136, 52, 87, 115, 140, 82, 69, 121]).reshape(-1, 1).reshape(15,1)\n",
        "\n",
        "\n",
        "x = np.asmatrix(np.c_[np.ones((15,1)),x])\n",
        "\n",
        "I = np.identity(2)\n",
        "alphas = [0.01, 0.1, 1, 10, 100]\n",
        "\n",
        "results = []\n",
        "\n",
        "for alpha in alphas:\n",
        "    w = np.linalg.inv(x.T * x + alpha * I) * x.T * y\n",
        "    w = w.ravel()\n",
        "    results.append((alpha, w))\n",
        "\n",
        "# Compare the results\n",
        "for alpha, w in results:\n",
        "    print(f\"Alpha: {alpha}, Weights: {w}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jZTGw22OIKbR"
      },
      "source": [
        "## 2. Implement based on the Ridge regression example, the Lasso regression.\n",
        "\n",
        "Please implement the SGD method and compare the results with the sklearn Lasso regression results."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lMsYjUBVIKbS"
      },
      "outputs": [],
      "source": [
        "def sgd_lasso(x, y, alpha=0.1, lr=0.001, epochs=1000):\n",
        "    m, n = x.shape\n",
        "    w = np.zeros((n, 1))  # Initialize weights\n",
        "\n",
        "    for epoch in range(epochs):\n",
        "        for i in range(m):\n",
        "            xi = x[i, :].reshape(1, -1)\n",
        "            yi = y[i, 0]\n",
        "            prediction = xi @ w\n",
        "            error = prediction - yi\n",
        "\n",
        "            # Gradient of the loss function (without L1 term)\n",
        "            gradient = xi.T * error\n",
        "\n",
        "            # Update weights with L1 penalty (soft-thresholding)\n",
        "            w -= lr * gradient\n",
        "\n",
        "            # Soft-thresholding for L1 regularization\n",
        "            w[1:] = np.sign(w[1:]) * np.maximum(np.abs(w[1:]) - lr * alpha, 0)\n",
        "\n",
        "    return w.ravel()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J_0MakLQIKbT",
        "outputId": "e90ea5f3-b5fc-4609-e6ab-0252c462339a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-5-e1598d70924d>:13: RuntimeWarning: overflow encountered in multiply\n",
            "  gradient = xi.T * error\n",
            "<ipython-input-5-e1598d70924d>:16: RuntimeWarning: invalid value encountered in subtract\n",
            "  w -= lr * gradient\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SGD Lasso Weights: [nan nan]\n",
            "sklearn Lasso Weights: [-168.19471366    1.54607814]\n"
          ]
        }
      ],
      "source": [
        "y = np.array([141, 106, 149, 59, 79, 136, 65, 136, 52, 87, 115, 140, 82, 69, 121]).reshape(-1, 1)\n",
        "x = np.array([188, 181, 197, 168, 167, 187, 178, 194, 140, 176, 168, 192, 173, 142, 176]).reshape(-1, 1)\n",
        "\n",
        "# Add intercept term\n",
        "x = np.c_[np.ones((15, 1)), x]  # Use np.c_ without asmatrix\n",
        "\n",
        "# Hyperparameters\n",
        "alpha = 0.1\n",
        "\n",
        "# Perform SGD for Lasso\n",
        "w_sgd = sgd_lasso(x, y, alpha=alpha)\n",
        "print(\"SGD Lasso Weights:\", w_sgd)\n",
        "\n",
        "# Compare with sklearn Lasso\n",
        "lasso = Lasso(alpha=alpha, fit_intercept=False, max_iter=10000)\n",
        "lasso.fit(x, y)\n",
        "print(\"sklearn Lasso Weights:\", lasso.coef_)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "66tb8yyoIKbV"
      },
      "source": [
        "## 3. Extend the Fisher's classifier\n",
        "\n",
        "Please extend the targets of the ``iris_data`` variable and use it as the $y$."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 698
        },
        "id": "TbbblCv2IKbW",
        "outputId": "508be3fb-c0fb-473f-f93a-80c8ea8e0554"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\n",
            "0                5.1               3.5                1.4               0.2   \n",
            "1                4.9               3.0                1.4               0.2   \n",
            "2                4.7               3.2                1.3               0.2   \n",
            "3                4.6               3.1                1.5               0.2   \n",
            "4                5.0               3.6                1.4               0.2   \n",
            "\n",
            "   target  \n",
            "0       0  \n",
            "1       0  \n",
            "2       0  \n",
            "3       0  \n",
            "4       0  \n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.datasets import load_iris\n",
        "\n",
        "# Load iris dataset\n",
        "iris_data = load_iris()\n",
        "iris_df = pd.DataFrame(iris_data.data, columns=iris_data.feature_names)\n",
        "iris_df['target'] = iris_data.target\n",
        "\n",
        "# Display the first few rows\n",
        "print(iris_df.head())\n",
        "\n",
        "# Use sepal width as x and a combination of sepal length and target as y\n",
        "x = iris_df['sepal width (cm)'].values\n",
        "y = iris_df['sepal length (cm)'].values + iris_df['target'].values\n",
        "\n",
        "# Dataset size\n",
        "dataset_size = np.size(x)\n",
        "\n",
        "# Calculate means\n",
        "mean_x, mean_y = np.mean(x), np.mean(y)\n",
        "\n",
        "# Compute sums of squares\n",
        "SS_xy = np.sum(y * x) - dataset_size * mean_y * mean_x\n",
        "SS_xx = np.sum(x * x) - dataset_size * mean_x * mean_x\n",
        "\n",
        "# Calculate regression coefficients\n",
        "a = SS_xy / SS_xx\n",
        "b = mean_y - a * mean_x\n",
        "\n",
        "# Predict y values\n",
        "y_pred = a * x + b\n",
        "\n",
        "# Plotting the data and the regression line\n",
        "plt.scatter(x, y, color='blue', label='Actual Data')\n",
        "plt.plot(x, y_pred, color='red', label='Regression Line')\n",
        "plt.xlabel('Sepal Width (cm)')\n",
        "plt.ylabel('Extended Target (Sepal Length + Target)')\n",
        "plt.legend()\n",
        "plt.title('Fishers Classifier Extension')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "AAYa8ImTJ9IW"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.9"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
